buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.15.1"
        classpath "net.saliman:gradle-cobertura-plugin:2.6.0"
    }
}

version "9.34"
group "banner.ui.ss"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin: "java"
apply plugin: 'net.saliman.cobertura'

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.6"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails:grails-web-testing-support"
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.poi:poi:4.1.2'
    compile 'org.apache.poi:poi-ooxml:4.1.2'
    compile 'org.apache.poi:poi-ooxml-schemas:4.1.2'
    compile 'org.apache.poi:poi-scratchpad:4.1.2'
    compile 'org.apache.xmlbeans:xmlbeans:2.3.0'
    compile "org.grails.plugins:hibernate5"
    // START The excluding dom4j and upgrading it has to be removed while we are going for grails 4 migration.
    compile ("org.hibernate:hibernate-core:5.1.17.Final") {
        exclude module: "dom4j"
    }
    compile group: 'org.dom4j', name: 'dom4j', version: '2.1.3'
    // END
    compile "org.hibernate:hibernate-ehcache:5.1.17.Final"
    compile 'org.grails.plugins:spring-security-core:3.2.3'
    compile 'xalan:xalan:2.7.2'
}

configurations {
    runtime.exclude group: "org.grails", module: "grails-gorm-testing-support"
}

grails {
    plugins {
        compile project(":banner-core")
        compile project(":banner-general-utility")
        compile project(":i18n-core")
    }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false

classes {
    doLast{
        println("Executing RtlCSSGenerator...")
        tasks["executertlcssgenerator"].execute()
        tasks["generateSCSSFile"].execute()

    }
}

task(executertlcssgenerator, type: JavaExec) {
    main = 'net.hedtech.banner.common.RtlCssGenerator'
    classpath = sourceSets.main.runtimeClasspath
}

assets {
    packagePlugin = true
}

task (generateSCSSFile, type: JavaExec)  {
    main = 'net.hedtech.banner.common.ThemeScssGenerator'
    def scssFilePath = "${project.rootDir}/src/main/webapp/css/theme/"
    def appName = "${rootProject.name}"
    def appVersion ="${rootProject.version}"
    def versionText = appVersion ? ("-" + appVersion).replaceAll(/\./, '_') : ""
    def scssFileName = (appName + versionText) + ".scss"

    def scssFile = scssFilePath+scssFileName
    System.setProperty('scssFile',scssFile)
    System.setProperty('appName',appName)
    System.setProperty('appVersion',appVersion)
    
    try {
        System.properties.each { k,v->
            if (k.startsWith("scssFile")) {
                systemProperty 'scssFile', scssFile
            }else if (k.startsWith("appName")){
                systemProperty 'appName', appName
            }else if(k.startsWith("appVersion")){
                systemProperty 'appVersion', appVersion
            }
        }
        classpath = sourceSets.main.runtimeClasspath
        
    } catch (FileNotFoundException e) {
        println "Unable to generate theme SCSS file - unexpected exception"
        e.printStackTrace()
    }
}

apply plugin: 'codenarc'
dependencies {
    //testRuntime "org.slf4j:slf4j-log4j12:1.7.5"
    //testRuntime "log4j:log4j:1.2.17"
}
codenarc {
    def codenarcRulePath = project(":banner-codenarc").projectDir.absolutePath + "/config/codenarc/rules.groovy"
    configFile = file(codenarcRulePath)
    maxPriority1Violations = Integer.MAX_VALUE
    maxPriority2Violations = Integer.MAX_VALUE
    maxPriority3Violations = Integer.MAX_VALUE
}

integrationTest {
    ignoreFailures = true
}

test {
    ignoreFailures = true
}

cobertura{
    coverageFormats = ['xml','html']
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams false
    }
}
