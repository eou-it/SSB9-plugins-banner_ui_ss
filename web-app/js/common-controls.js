/* * ****************************************************************************** *  © 2010 SunGard Higher Education.  All Rights Reserved. * *  CONFIDENTIAL BUSINESS INFORMATION * *  THIS PROGRAM IS PROPRIETARY INFORMATION OF SUNGARD HIGHER EDUCATION *  AND IS NOT TO BE COPIED, REPRODUCED, LENT, OR DISPOSED OF, *  NOR USED FOR ANY PURPOSE OTHER THAN THAT WHICH IT IS SPECIFICALLY PROVIDED *  WITHOUT THE WRITTEN PERMISSION OF THE SAID COMPANY *  ****************************************************************************** *//** * @class UI display component representing a Button. * * @constructor * * @param id {Integer} The id for the component. * @param label {String} The label displayed to the user by the component. * @param callback {Function} The method that is invoked when the button's click event is triggered. * * @author jmiller */function Button(id, label, callback, type) {    if (typeof(type) == "undefined") {        type = "";    }    var b = $("<span class='primaryButton2 " + type + "' id='" + id + "'>"            + "<span class='primaryButtonComponent primaryButtonLeft" + type + "'></span>"            + "<span class='primaryButtonComponent primaryButtonMiddle" + type + "' id='" + id + "Text'>" + ResourceManager.getString(label) + "</span>"            + "<span class='primaryButtonComponent primaryButtonRight" + type + "'></span>"            + "</span>");    if (typeof(callback) == "function") {        b.click(callback);    }    b.hover(function() {        $(this).find('.primaryButtonLeft').addClass("primaryButtonLeftHover");        $(this).find('.primaryButtonMiddle').addClass("primaryButtonMiddleHover");        $(this).find('.primaryButtonRight').addClass("primaryButtonRightHover");    }).mouseleave(function() {        $(this).find('.primaryButtonLeft').removeClass("primaryButtonLeftHover");        $(this).find('.primaryButtonMiddle').removeClass("primaryButtonMiddleHover");        $(this).find('.primaryButtonRight').removeClass("primaryButtonRightHover");    });    EventDispatcher.addEventListener(Localization.events.localeChange,            function() {                b.find('.primaryButtonMiddle').text(ResourceManager.getString(label));            });    return b;};/** * @class UI display component representing a Modal Window. * * @constructor * * @param id {Integer} The id for the component. * @param label {String} The label displayed to the user by the component. * @param callback {Function} The method that is invoked when the close button's click event is triggered. * * @author jmiller */function ModalWindow(id, label, type, closeCallback) {    var modal = $("<div class='modalContainer'>"            + "<div class='modalWindowModal'></div>"            + "<div class='modalWindow' id='" + id + "'>"            + "<div class='modalWindowTop" + type + "'>"            + "<span class='modalWindowIcon " + type + "'></span>"            + "<span class='modalWindowTitle " + type + "'>" + ResourceManager.getString(label) + "</span>"            + "<span class='modalCloseIcon" + type + "'></span>"            + "</div>"            + "<div class='modalWindowMiddle" + type + "'>"            + "<div class='modalWindowContent " + type + "'></div>"            + "</div>"            + "<div class='modalWindowBottom" + type + "'>"            + "<div class='buttonBar modalButtonBar" + type + "'></div>"            + "</div>"            + "</div></div>");    if (typeof(closeCallback) == "function") {        modal.find('.modalCloseIcon').bind("click", closeCallback);    }    EventDispatcher.addEventListener(Localization.events.localeChange,            function() {                modal.find('.modalWindowTitle').text(ResourceManager.getString(label));            });    return modal;};/** * Manages the creation and display of modal windows within the Common Platform. * @jmiller */var ModalWindowFactory = {    /**     * @private     * The currently established modal window.     * @type {JQuery DOM Object}     */    currentModal: null,    /**     * Creates and shows a modal dialog window.     *     * @param {String} id The DOM element id to assign to the modal window instance.     * @param {String} label The title for the window.     * @param {String} The class type for the modal window display.     * @param {Object} content The content to display in the window. Accepts HTML as a string or a JQuery element Object.     * @param {String} contentClass Any additional CSS classes to assign tot he content pane.     * @param {Array} buttons The <object>Buttons</object> to display.     * @param {Function} closeCallback A auxillary callback function that is executed when the close button is clicked.     */    show: function(id, label, type, content, contentClass, buttons, closeCallback) {        var modal = ModalWindow(id, label, type, closeCallback);        modal.find('.modalWindowContent').append(content);        for (var x = 0; x < buttons.length; x++) {            modal.find('.buttonBar').append(buttons[x]);        }        $('body').append(modal);        modal.find('.modalWindowModal').animate({ opacity: 0.25, height: '100%', width: '100%' }, 1000);        modal.find('.modalWindow').fadeIn();        // vertically center the modal window        var winHeight = window.innerHeight/2;        var winWidth = window.innerWidth/2;        var modHeight = modal.find('.modalWindow').height()/2;        var modWidth = modal.find('.modalWindow').width()/2;        if (modHeight != 0                && winHeight - modHeight >= 0) {            modal.find('.modalWindow').css("top", winHeight - modHeight);        }        if (modWidth != 0                && winWidth - modWidth >= 0) {            modal.find('.modalWindow').css("left", winWidth - modWidth);        }        ModalWindowFactory.currentModal = modal;    },    /**     * Closes the currently open modal window.     */    close: function() {        if (!ModalWindowFactory.currentModal) {            return;        }        ModalWindowFactory.currentModal.find('.modalWindow').fadeOut();        ModalWindowFactory.currentModal.find('.modalWindowModal').animate({ opacity: 0, height: '100%', width: '100%' }, 1000, function() {            if (ModalWindowFactory.currentModal) {                ModalWindowFactory.currentModal.remove();                ModalWindowFactory.currentModal = null;            }        });    }}function actionWindowControls() {//    var actions = SearchBox();//    return actions;}/** * @author jmiller */function Header() {    return $("<div id='header'>"            + "<div id='areas'></div>"            + "<div id='browseMenuContainer'>"            + "<span class='bottomDropShadow'></span>"            + "</div>"            + "<div id='openedItemsContainer'/>"            + "<div id='toolsContainer'/>"            + "</div>");}function InstitutionalBranding() {    return $("<a href='#' target='_parent'><span class='institutionalBranding'></span></a>");  /* href link was ealier "/banner/" */}function SearchBox() {    var out = $("<div id='searchBox'>"            + "<span class='searchInputContainer'><span class='findicon'/><input id='searchInput' type='text'/></span>"            + "<span id='searchButton'> Advanced Search </span>"            + "</div>");    out.find('#searchInput').focus(function() {        if ($(this).val() == ResourceManager.getString("search_title")) {            $(this).val("");        }    }).blur(function() {        if ($(this).val() == "") {            $(this).val(ResourceManager.getString("search_title"));        }    });    EventDispatcher.addEventListener(Localization.events.localeChange,            function() {                out.find('#searchInput').val(ResourceManager.getString("search_title"));            });    return out;}function OpenItemsPanel() {    var out = $("<div id='openItemsPanel'>" +            "<div class='openItemsHeader'>" +            "</div>" +            "<ul>" +            "<li><a href=''> test </a></li>" +            "</ul>" +            "</div>");    return out;}function addNavigationControls() {    var areas = $('#areas');    areas.append("<div id='browseButtonState'/>");    areas.append("<div id='toolsButtonState'/>");    areas.append("<div id='openedItemsButtonState'/>");    areas.find('#browseButtonState').append("<div id='browseButton' class='browseButton'>"            + "<div>"            + "<div>"            + "<a id='browseArrow' class='browseButtonDownArrow' href='javascript:void(0)'></a>"            + "</div>"            + "</div>"            + "</div>");    BreadCrumb.create();    areas.find('#toolsButtonState').append("<div id='toolsButton' class='headerButton'>"            + "<div>"            + "<div>"            + "<a id='toolsArrow' class='headerButtonDownArrow' href='javascript:void(0)'></a>"            + "</div>"            + "</div>"            + "</div>");    areas.find('#openedItemsButtonState').append("<div id='openedButton' class='headerButton' title='Alt+G'>"            + "<div>"            + "<div>"            + "<a id='openedArrow' class='headerButtonDownArrow' href='javascript:void(0)'></a>"            + "</div>"            + "</div>"            + "</div>");    $('#browseMenuContainer').prepend("<div id='browseMenu'>"            + "<div class='browseMenuShadow'>"            + "<div id='scrollableListContainer'></div>"            + "</div>"            + "</div>"            + "<span id='browseButtonBottom' class='browseButton'></span>");    $('#openedItemsContainer').prepend("<div id='openedItemsMenu'>"            + "<div class='browseMenuShadow'>"            + "<div id='openedItemsCanvas'></div>"            + "</div>"            + "</div>");    $('#toolsContainer').prepend("<div id='toolsMenu'>"            + "<div class='browseMenuShadow'>"            + "<div id='toolsCanvas'></div>"            + "</div>"            + "</div>");    areas.find('#browseButton, #browseButtonBottom').bind("click", toggleBrowseMenu);    areas.find('#openedButton').bind("click", toggleOpenedItems);    areas.find('#toolsButton').bind("click", toggleToolsMenu);    areas.find('.browseButton').hover(function() {        if(areas.find("#browseButton").hasClass('browseTab')) {            return;        }        $(this).css("background-position", "0px -48px");        $(this).children().css("background-position", "right -48px");        $(this).children().children().css("background-position", "0px -72px");    }).mouseleave(function() {        if(areas.find("#browseButton").hasClass('browseTab')) {            return;        }        $(this).css("background-position", "0px 0px");        $(this).children().css("background-position", "right 0px");        $(this).children().children().css("background-position", "0px -24px");    });    EventDispatcher.addEventListener(Localization.events.localeChange,            function() {                //            $('#browseButton div div a').text(ResourceManager.getString("areas_label_browse"));                $('#openedButton div div a').text(ResourceManager.getString("areas_label_opened"));                $('#toolsButton div div a').text(ResourceManager.getString("areas_label_tools"));            });}function closeOpenMenus() {    if(!$('#browseMenu').is(':hidden') && !$('#browseButtonState').hasClass('over') &&            !$('#browseMenu').hasClass('over')) {        toggleBrowseMenu()    }    if(!$('#openedItemsMenu').is(':hidden') && !$('#openedItemsButtonState').hasClass('over') &&            !$('#openedItemsMenu').hasClass('over')) {        toggleOpenedItems()    }    if(!$('#toolsMenu').is(':hidden') && !$('#toolsButtonState').hasClass('over') &&            !$('#toolsMenu').hasClass('over')) {        toggleToolsMenu()    }}function closeAllMenus() {    if(!$('#browseMenu').is(':hidden')) {        toggleBrowseMenu()    }    if(!$('#openedItemsMenu').is(':hidden')) {        toggleOpenedItems()    }    if(!$('#toolsMenu').is(':hidden')) {        toggleToolsMenu()    }}function scrollSelectedItemIntoView() {    $('.navList').each(function(e) {        var container =  $(this);        $(this).children().each(function(e) {            if($(this).hasClass('selectedListItem')) {                    $(this).get(0).scrollIntoView(false);//                container.parent().get(0).scrollTop = 1000;            } else if($(this).hasClass('selectedListPage')) {                    $(this).get(0).scrollIntoView(false);//                container.parent().get(0).scrollTop = 1000;            }        });    });}function toggleBrowseMenu() {    var browseMenu = $('#browseMenu');    var browseButtonState = $('#browseButtonState');    var browseButton = browseButtonState.find('#browseButton');    if (browseMenu.is(':hidden')) {        browseButton.removeClass("browseButton");        browseButton.addClass("browseTab");        browseButton.find('#browseArrow').removeClass('browseButtonDownArrow');        browseButton.find('#browseArrow').addClass('upArrow');        browseButtonState.addClass('active over');        closeOpenMenus();        browseMenu.slideDown('normal', function() {            // add a handler to close the Browsemenu when the mouse is clicked outside            $('body').click(function() {                closeOpenMenus();            });            // scroll the selectedItem into view            scrollSelectedItemIntoView();        });        $('#browseButtonState, #browseMenu').bind('mouseenter', function() {$(this).addClass("over");});        $('#browseButtonState, #browseMenu').bind('mouseleave', function() {$(this).removeClass("over");});    } else {        browseButton.removeClass("browseTab");        browseButton.addClass("browseButton");        browseButton.find('#browseArrow').removeClass('upArrow');        browseButton.find('#browseArrow').addClass('browseButtonDownArrow');        browseMenu.slideUp('normal', function() {            browseButtonState.removeClass('active');        });        browseButton.mouseleave();        // force clearing any existing handler        $('body').unbind('click');    }    return false;}function toggleOpenedItems() {    if ($('#openedItemsMenu').is(':hidden')) {        $('#openedButton').removeClass("openedButton");        $('#openedArrow').removeClass('headerButtonDownArrow');        $('#openedArrow').addClass('upArrow');        $('#openedItemsButtonState').addClass('active over');        closeOpenMenus();        $('#openedItemsMenu').slideDown('normal', function() {            // add a handler to close the Browsemenu when the mouse is clicked outside            $('body').click(function() {                closeOpenMenus();            });        });        $('#openedItemsButtonState, #openedItemsMenu').bind('mouseenter', function() {$(this).addClass("over");});        $('#openedItemsButtonState, #openedItemsMenu').bind('mouseleave', function() {$(this).removeClass("over");});    } else {        $('#openedButton').addClass("openedButton");        $('#openedArrow').removeClass('upArrow');        $('#openedArrow').addClass('headerButtonDownArrow');        $('#openedItemsMenu').slideUp('normal', function() {            $('#openedItemsButtonState').removeClass('active');        });        $('.openedButton').mouseleave();        // force clearing any existing handler        $('body').unbind('click');    }    return false;}function toggleToolsMenu() {    if ($('#toolsMenu').is(':hidden')) {        $('#toolsButton').removeClass("toolsButton");        $('#toolsArrow').removeClass('headerButtonDownArrow');        $('#toolsArrow').addClass('upArrow');        $('#toolsButtonState').addClass('active over');        closeOpenMenus();        $('#toolsMenu').slideDown('normal', function() {            // add a handler to close the Browsemenu when the mouse is clicked outside            $('body').click(function() {                closeOpenMenus();            });        });        $('#toolsButtonState, #toolsMenu').bind('mouseenter', function() {$(this).addClass("over");});        $('#toolsButtonState, #toolsMenu').bind('mouseleave', function() {$(this).removeClass("over");});    } else {        $('#toolsButton').addClass("toolsButton");        $('#toolsArrow').removeClass('upArrow');        $('#toolsArrow').addClass('headerButtonDownArrow');        $('#toolsMenu').slideUp('normal', function() {            $('#toolsButtonState').removeClass('active');        });        $('.toolsButton').mouseleave();        // force clearing any existing handler        $('body').unbind('click');    }    return false;}function UserControls() {    var out = $("<div id='globalNav'>"            + "<div>"            + "<ul>"            + "<li class='userIdentityText bold'>" + CommonContext.user + "</li>"            + "<li><a class='signOutText pointer'>" + ResourceManager.getString("userdetails_signout") + " | " + "</a></li>"            + "<li><a class='preferenceText pointer'>" + ResourceManager.getString("preferences_label") + " | " + "</a></li>"            + "<li><a class='helpText pointer'>" + ResourceManager.getString("userdetails_help") + "</a></li>"            + "</ul>"            + "</div>"            + "</div>");    out.find('.signOutText').click(function() {        // set CommonContext.user to null before removing the cookie        CommonContext.user = null;        CookieManager.remove("username");        /*if (CommonContext.standalone) {            if (typeof (Messenger.messageHandler) == 'function') {                if($(this).hasClass('signIn')) {                    Messenger.messageHandler(createRequestMessage("signin"));                } else {                    Messenger.messageHandler(createRequestMessage("signout"));                }            }        } else {            window.location = "/j_spring_security_logout";        }*/        if($(this).hasClass('signIn')) {            window.location = "login/auth";        } else {            window.location = "j_spring_security_logout";        }    });    out.find('.preferenceText').bind("click", Preferences.show);    EventDispatcher.addEventListener(Localization.events.localeChange,            function() {                if(CommonContext.user) {                    out.find('.signOutText').text(ResourceManager.getString("userdetails_signout"));                    out.find('.signOutText').addClass('signOut');                } else {                    out.find('.signOutText').text(ResourceManager.getString("userdetails_signin"));                    out.find('.signOutText').addClass('signIn');                }                out.find('.preferenceText').text(ResourceManager.getString("preferences_label"));                out.find('.helpText').text(ResourceManager.getString("userdetails_help"));            });    return out;}function setUserName(uname) {    if(uname != null) {        $('.userIdentityText').text(uname);        CommonContext.user = uname;    }}/** * @class value object that represents a footer application. * @constructor * * @param {String} appid The id for the footer application. * @param {String} className The class name for the footer application. * @param {String} displayUI The HTML representation for the display component. * * @author jmiller */function FooterApplicationValueObject(appid, className, displayUI) {    this.appid = appid;    this.className = className;    this.displayUI = displayUI;}/** * @class value object that represents a footerAppContainer * @constructor * * @param {int} index The index at which the footer div to be injected * @param {String} appId The appId of the managed application. * @param {String} html The html content to be injected by the managed application * * @author prashanth */function footerAppDiv(index, appId, html){    this.index = index;    this.appId = appId;    this.html = html;}/** * @class Singleton class that provides the interface for handling applications * that display within the footer bar. * * @author jmiller */var Footer = {    /**     * The list of loaded FooterApplicationValueObject objects.     * @type Array     */    apps: [],    /**     * @private     *     * ID marker for the display component of a FooterApplicationValueObject     * @type String     */    uiMarker: "-ui",    /**     * @private     * The list of loaded FooterApplicationValueObject objects.     * @type Array     */    appContainers: [],    /**     * @private     *     * The HTML UI elements.     */    displayUI: "<div id='outerFooter'>"            + "<div id='footer'>"            + "<div id='footerApplicationBar'>"            + "<ul id='footerIconContainer'></ul>"            + "<span class='footerBrandingLogo'></span>"            + "<div id='footerAppContainer'"            + "</div>"            + "</div>"            + "</div>"            + "</div>",    /**     * @private     *     * Initialization method.     */    initialize: function() {        $('body').append(Footer.displayUI);        $('.footerBrandingLogo').click(function() {            var nav = Navigation.findNavigationEntry("institutionHomePage");            if (nav                    && nav instanceof NavigationEntryValueObject) {                Navigation.navigate(nav);            }        });    },    /**     * Method for adding an application to the Footer.     * @param {FooterApplicationValueObject} footerApplication The FooterApplicationValueObject to add.     */    add: function(footerApplication) {        if (footerApplication instanceof FooterApplicationValueObject) {            var icon = "<li><span id='" + footerApplication.appid + "' class='" + footerApplication.className + "'></span></li>";            var ui = $("<div id='" + footerApplication.appid + this.uiMarker + "'></div>");            ui.append(footerApplication.displayUI);            $('#footerIconContainer').append(icon);            $('#footerContainer').append(ui);            this.apps.push(footerApplication);        }    },    /**     * Method for removing an application from the Footer.     * @param {String} appid The id of the FooterApplicationValueObject to remove.     */    remove: function(appid) {        for (var x = 0; x < this.apps.length; x++) {            if (this.apps[x].appid == appid) {                $('#' + this.apps[x].appid).parent().remove();                $('#' + this.apps[x].appid + this.uiMarker).remove();            }        }    },    /** Function to create a div in the footerAppContainer     * @constructor     *     * @param {footerDiv} object of type footerAppDiv     * @return {footerAppDiv} object of type footerAppDiv     *     * @author prashanth     */    createContainer: function(footerDiv){        if (footerDiv instanceof footerAppDiv) {            for (i = 0; i < Footer.appContainers.length; i++) {                if (Footer.appContainers[i].appId == footerDiv.appId) {                    $('#footerAppContainer').find('#' + footerDiv.appId).remove();                }            }            var ui = $("<div id='" + footerDiv.appId + "'></div>");            var arrIndex = $("#footerAppContainer").children().length;            if (footerDiv.index != -1 && footerDiv.index != null && footerDiv.index <= $("#footerAppContainer").children().length) {                if ($("#footerAppContainer").children().length > 0) {                    if (footerDiv.index != 0) {                        $("#footerAppContainer").find('div:eq(' + (footerDiv.index - 1) + ')').after(ui);                    }                    else                    if (footerDiv.index == 0) {                        $("#footerAppContainer").find('div:eq(' + footerDiv.index + ')').before(ui);                    }                }                else {                    if (footerDiv.index == 0) {                        $("#footerAppContainer").append(ui);                    }                }            }            else {                $("#footerAppContainer").append(ui);            }            $('#footer').find('#' + footerDiv.appId).html(footerDiv.html);            this.appContainers.push(footerDiv);        }        return footerDiv;    },    /** Function to get a div from the footerAppContainer     * @constructor     *     * @param {String} appId the appId of the managed application     * @return {footerAppDiv} object of type footerAppDiv     *     * @author prashanth     */    getAppContainer: function(appId){        var children = $("#footerAppContainer").children().size();        var appNewDiv;        var exists = 'false';        for (i = 0; i < Footer.appContainers.length; i++) {            if (Footer.appContainers[i].appId == appId) {                exists = 'true';                appNewDiv = Footer.appContainers[i];                break;            }        }        if (exists == "true") {            return appNewDiv;        }        else {            return Footer.createContainer(new footerAppDiv(children, appId, ""));        }    }};/** * @class NavigationRC Class to support auto selection of navigation items when the application loads * * @author jai.chandramouli */var NavigationRC = {    /**     * Identifier prefix     */    id: 'list',    /**     * NavigationEntryValueObject containing the current page details loaded from service     */    navEntry:null,    /**     * List to contain the page heirarchy     */    pathList: [],    /**     * @private     * Indicates if the Navigation system has been initialized.     */    initialized: false,    /**     * @private     * Indicates if all entries have been loaded     */    loadComplete: false,    /**     * @private     * The navigation service's web service endpoint.     */    endpoints: ["/banner_on_grails/menu"],    /**     * @private     * The active endpoint index.     * @default 0     */    endpointIndex: -1,    initialize: function(pageName) {        if(pageName == null)            pageName = NavigationRC.getPageName();        if(pageName == "")            return;        NavigationRC.endpointIndex += 1;        if (NavigationRC.endpointIndex >= NavigationRC.endpoints.length) {//            ErrorManager.show("Unable to preload page specific entries.");            return false;        }        var ep = NavigationRC.endpoints[NavigationRC.endpointIndex];        var endpoint = window.location.protocol                + "//"                + window.location.host                + ep                + "?pageName=" + pageName;        ServiceManager.get(endpoint, NavigationRC.handleServiceResults);    },    reInitialize: function(pageName) {        NavigationRC.initialized = false;        NavigationRC.endpointIndex = -1;        NavigationRC.loadComplete = false;        NavigationRC.initialize(pageName);    },    getPageName: function() {        var loc = window.location.href;//        return loc.split('/').pop().split('.').shift();        return loc.substring(loc.indexOf("page=")+5,loc.length)    },    /**     * @private     *     * Processes a XML Document that represents available navigation entries and establish     * the navigation system.     * @param {XMLDocument} xmldoc The XML Document to parse.     */    handleServiceResults: function(xmldoc) {        if (!xmldoc) {            NavigationRC.initialized = false;            return;        }        if (xmldoc.status) { // means its an XMLHttpRequest object            if (xmldoc.status == 404                    || xmldoc.status == 500) {                NavigationRC.initialize();                return;            }            if (xmldoc.status == 400) {                return;            }        }        var vo = NavigationRC.loadXML(xmldoc);        if(CommonContext.standalone == true) {            var nav = vo[0];            if(nav != null ) {                NavigationRC.navEntry = nav;                NavigationRC.pathList = nav.menu.split("/");                NavigationRC.doInitialLoad();                NavigationRC.initialized = true;            }        }    },    /**     * Processes a XML Document that represents available navigation entries.     *     * @param {XMLDocument} xmldoc The XML Document to parse.     * @return NavigationEntryValueObject[] The navigation entries loaded.     */    loadXML: function(xmldoc) {        if (!xmldoc) {            return null;        }        var entries = xmldoc.getElementsByTagName("NavigationEntryValueObject");        var vo = [];        for (var x = 0; x < entries.length; x++) {            if (!entries[x].attributes) {                continue;            }            var nav = new NavigationEntryValueObject();            for (var y = 0; y < entries[x].attributes.length; y++) {                nav[entries[x].attributes[y].nodeName] = entries[x].attributes[y].nodeValue;            }            vo.push(nav);        }        return vo;    },    doInitialLoad: function() {        $('#browseMenu').addClass('visibility');        NavigationRC.loadNext();    },    setBreadCrumb: function(itemId) {        var loc = itemId.replace(ScrollableList.marker, "").split("_");        var bcName = loc.pop()        var breadCrumbItem = new BreadCrumbValueObject(bcName, bcName, '', itemId);        BreadCrumb.insertItem(loc.length, breadCrumbItem);    },    loadNext: function() {        if(NavigationRC.pathList.length == 0) {            if(!NavigationRC.loadComplete) {                if(NavigationRC.navEntry) {                    var leafId = NavigationRC.id+'_'+NavigationRC.navEntry.caption;                    var breadCrumbItem = new BreadCrumbValueObject(BreadCrumb.leafId, NavigationRC.navEntry.caption, '', leafId);   //                    BreadCrumb.pushItem(breadCrumbItem);                    ScrollableList.selectedItem(leafId);                }            }            $('#browseMenu').removeClass('visibility');            NavigationRC.loadComplete = true;            NavigationRC.id = "list";            return;        }        NavigationRC.id += '_'+NavigationRC.pathList.shift();        // if this is the first run i.e. during page load, then create breadcrumbs        if(!NavigationRC.loadComplete) {            NavigationRC.setBreadCrumb(NavigationRC.id);        }        var item = $('.navList > .scrollableListFolder[id="'+NavigationRC.id+'"]');        if(item.length > 0) {//            item.click();            ScrollableList.load(item);        } else {            // this should be a leaf item, select breadcrumb item            EventDispatcher                .dispatchEvent(ScrollableList.events.click, NavigationRC.id);            NavigationRC.loadNext();        }    }};/** * @class A ScrollableList component. This singleton class creates and controls * the display of the data in a mulidimentional array as a series of scrolling * list components. * * @author jmiller */var ScrollableList = {    /**     * Flag to check if the ScrollableList is initialized     * @type Boolean     * @default false     */    initialized: false,    /**     * The scrolling speed.     * @type Number     * @default 5     */    speed: 5,    /**     * The height of the scrollable components.     * @type Number     * @default 110     */    height: 110,    /**     * @private     *     * The JavaScript interval id used to control scroll behavior.     * @type Number     */    interval: null,    /**     * @private     *     * The JQuery object representing the currently selected list during scrolling.     * @type Element     */    selectedList: null,    /**     * @private     *     * The JQuery object representing the last selected list item.     * @type Element     */    selectedListItem: null,    /**     * @private     *     * The internal marker suffixed to all generated ids.     * @type String     * @default "list_"     */    marker: "list_",    /**     * Total number of columns to display on initialization     */    totalColumns:2,    /**     * Total number of columns that are added at runtime     */    numColumns:0,    /**     * Events associated with the ScrollableList.     */    events: {        click: "navigationItemClick"    },    /**     * ScrollableList UI component initialization method.     */    initialize: function() {        EventDispatcher.addEventListener(BreadCrumb.events.click,                ScrollableList.selectedItem);        this.add(ScrollableList.totalColumns);        $('.navList > .scrollableListFolder').live('click', function() { ScrollableList.load($(this)); });        var menu = Navigation.menuList;        for (var x in menu) {            if(typeof menu[x] == "function") {                continue;            }            if (x != "none") {                if (menu[x] instanceof Array) {                    $('.navList:first').append("<li id='" + ScrollableList.marker + x + "'  class='parent scrollableListFolder'><span>" + x + "</span></li>");                } else {                    $('.navList:first').append("<li class='scrollableListItem'><span title='" + menu[x] + "'>" + menu[x] + "</span></li>");                }            }        }        ScrollableList.refresh();        ScrollableList.attachScrollButtonHandlers();    },    reinitialize: function(len) {//       $('.navList > .scrollableListFolder').live('click', function() { ScrollableList.load($(this)); });        if(ScrollableList.selectedListItem) {            ScrollableList.load(ScrollableList.selectedListItem);            return;        }        var menu = Navigation.menuList;        for (var x in menu) {            if(typeof menu[x] == "function") {                continue;            }            if (x != "none") {                if(len == 1) {                    $('.navList:first').append("<li id='" + ScrollableList.marker + x + "'  class='parent scrollableListFolder'><span>" + x + "</span></li>");                } else {                    var temp = "list_"+x;                    $('#'+temp).remove();                    $('.selectedListItem').removeClass("selectedListItem");                    $('.navList:first').append("<li id='" + ScrollableList.marker + x + "'  class='parent scrollableListFolder'><span>" + x + "</span></li>");                }            }        }        ScrollableList.refresh();    },    /**     * Adds an additional ScrollableList to the parent component.     * @param {Number} count The number of list components to add (optional).     */    add: function(count) {        if (!count                || count <= 0) {            count = 1;        }        var trackWidth = 0;        for (var x = 0; x < count; x++) {            if (x == 0) {                $('#scrollableListContainer').append(""                        + "<div class='columns header'>"                        + "<div class='scrollContainer'>"                        + "<ul class='navList navListStart'></ul>"                        + "</div>"                        + "</div>");                $('#scrollableListContainer').append(""                        + "<div id='btn-l' class='btn-l'/>"                        );                $('#scrollableListContainer').append(""                        + "<div id='columnsContainer'><div id='columnsContainerTrack'/></div>"                        );                $('#scrollableListContainer').append(""                        + "<div id='btn-r' class='btn-r'/>"                        );            } else {                ScrollableList.addColumn();            }        }    },    /**     * Adds a column to the ScrollableList     */    addColumn: function() {        $('#columnsContainerTrack').append(""                + "<div class='columns'>"                + "<span class='scrollUpButton'></span>"                + "<div class='scrollContainer'>"                + "<ul class='navList'></ul>"                + "</div>"                + "<span class='scrollDownButton'></span>"                + "</div>");        ScrollableList.numColumns++;        var columnWidth = $('#columnsContainerTrack').find('.columns:last').width();        $('#columnsContainerTrack').css('width', ((ScrollableList.numColumns*columnWidth)+ScrollableList.numColumns)+'px');        ScrollableList.setScrollButtonStates();    },    /**     * Removes the last column from the ScrollableList and sets the columnsContainerTrack width     */    removeColumn: function(col) {        $('#columnsContainerTrack').find('.columns:last').remove();        ScrollableList.numColumns--;        var trackWidth = $('#columnsContainerTrack').find('.columns:first').width();        $('#columnsContainerTrack').css('width', ((ScrollableList.numColumns*trackWidth)+ScrollableList.numColumns)+'px');    },    /**     * Loads list content and populates the next list for a selected list item.     * @param {Element} item The JQuery element for the selected list item.     */    load: function(item) {        var loc = item.attr('id').replace(ScrollableList.marker, "").split("_");        item.parent().parent().parent().nextAll().find('.navList').each(function(i) {            ScrollableList.removeColumn();        })        ScrollableList.addColumn();        // show loader to the newly added column        // hidden below after data is loaded        var scrollContainer = item.parents('.columns').next().find('.scrollContainer');        scrollContainer.addClass('loader');        var next = null;        if(item.parent().hasClass('navListStart')) {            next = item.parent().parent().parent().next().next().find('.navList:first');        } else {            next = item.parent().parent().parent().next().find('.navList');        }        next.css("top", "0");//        item.parent().find("li").removeClass("selectedListItem");//        item.addClass("selectedListItem");        ScrollableList.selectedItem(item.attr('id'));        var list = Navigation.menuList;        for (var x = 0; x < loc.length; x++) {            if (list[loc[x]]) {                if (list[loc[x]] instanceof Array) {                    list = list[loc[x]];                }            }        }        for (var x in list) {            if(typeof list[x] == "function") {                continue;            }            if(list[x].path == "null.zul") {                var name = list[x].name;                // remove element and load new entries//                delete list[x];                ScrollableList.loadFromService(item, name);                return;            }            var id = item.attr('id') + "_" + x;            if (list[x] instanceof Array || list[x]['type'] == 'MENU') {                var node = $("<li id='" + id + "' class='parent scrollableListFolder'><span>" + x + "</span></li>");                /*if(NavigationRC.navEntry && (NavigationRC.navEntry.menu.indexOf(x) > -1)) {                    node.addClass("selectedListItem");                }*/                next.append(node);            } else if (list[x] instanceof NavigationEntryValueObject) {                var leaf = $("<li id='" + id + "' class='scrollableListItem' onclick=\"toggleBrowseMenu(); Navigation.navigate('" + list[x].name + "');\"><span title='" + list[x].caption + "' > " + list[x].caption + "</span></li>");                next.append(leaf);                /*if(NavigationRC.navEntry && (list[x].path == NavigationRC.navEntry.path)) {                    ScrollableList.selectedItem(id);                }*/            } else {                ErrorManager.show("Unknown entry encountered.");            }        }        // remove loader after data is loaded        scrollContainer.removeClass('loader');        ScrollableList.refresh();        /*if(NavigationRC.pathList.length > 0) {            var bcName = loc.pop();            var breadCrumbItem = new BreadCrumbValueObject(bcName, bcName, '', item.attr('id') + "_" + bcName);            BreadCrumb.insertItem(loc.length, breadCrumbItem);        }*///        var bcName = loc.pop();//        var breadCrumbItem = new BreadCrumbValueObject(bcName, bcName, '');//        BreadCrumb.insertItem(loc.length, breadCrumbItem);        EventDispatcher					.dispatchEvent(ScrollableList.events.click, item.attr('id'));        // NavigationRC might have more menu items to be fetched automatically        NavigationRC.loadNext();    },    /**     * loads data using the service     * @param item jQuery object of the clicked HTML element     * @param name the name in the NavigationEntryValueObject     */    loadFromService: function(item, name) {        ScrollableList.selectedListItem = item;        Navigation.nextNavItem(name);    },    /**     * Refreshes the scrolling state of all displayed list components.     */    refresh: function() {        $('.navList').each(function(i) {            if ($(this).height() > ScrollableList.height) {                var up = $(this).parent().parent().find('.scrollUpButton');                if (!up.hasClass("upButton")) {                    up.removeClass("upButtonDisabled");                    up.addClass("upButton");                    up.append("<span class='navUpArrow'></span>");                }                var down = $(this).parent().parent().find('.scrollDownButton');                if (!down.hasClass("downButton")) {                    down.removeClass("downButtonDisabled");                    down.addClass("downButton");                    down.append("<span class='navDownArrow'></span>");                }            } else {                var up = $(this).parent().parent().find('.scrollUpButton');                up.removeClass("upButton");                up.addClass("upButtonDisabled");                up.empty();                var down = $(this).parent().parent().find('.scrollDownButton');                down.removeClass("downButton");                down.addClass("downButtonDisabled");                down.empty();            }        });    },    /**     * sets the selection on the given node id     * This presently assumes only leaf nodes and folder node selection is done automatically when calling click()     * @param node     */    selectedItem: function(id) {        // for folder nodes        var node = $('.navList > .scrollableListFolder[id="'+id+'"]');        if(node.length == 0) {  // this is not a folder node            // check for leaf nodes            var node = $('.navList > .scrollableListItem[id="'+id+'"]');            if(node.length == 0)                return;            node.parent().find("li").removeClass("selectedListPage");            node.addClass("selectedListPage");        } else {            node.parent().find("li").removeClass("selectedListItem");            node.addClass("selectedListItem");        }//        node.get(0).scrollIntoView(false);    },    /**     * @private     *     * Callback method for scrolling a list up.     */    scrollup: function() {        if (ScrollableList.selectedList) {            var top = ScrollableList.selectedList.find('.navList').attr('offsetTop');            var newTop = (top < 0) ? top + ScrollableList.speed : top;            ScrollableList.selectedList.find('.navList').css("top", newTop + "px");        }    },    /**     * @private     *     * Callback method for scrolling a list down.     */    scrolldown: function() {        if (ScrollableList.selectedList) {            var height = ScrollableList.selectedList.find('.navList').attr('offsetHeight');            var top = ScrollableList.selectedList.find('.navList').attr('offsetTop');            var newTop = ((height + top) > ScrollableList.height) ? top - ScrollableList.speed : top;            ScrollableList.selectedList.find('.navList').css("top", newTop + "px");        }    },    /**     * @private     *     * Attaches necessary handlers for left/right scroll buttons.     */    attachScrollButtonHandlers: function() {        // scroll buttons --------------------------------        var colWidth = $('#columnsContainerTrack').find('.columns:first').css('width');        var isScrolling = false;        function resetIsScrolling() {            isScrolling = false;        }        $("#btn-l").css("visibility", "hidden");        $("#btn-r").css("visibility", "hidden");        // right button        // -----------------------------------------------        $("#btn-r").live("mouseover", function(){            $(this).css({                "border-color" : "#369",                "background-position" : "-52px center"            });        });        $("#btn-r").live("mouseout", function(){            $(this).css({                "border-color" : "#666",                "background-position" : "-18px center"            });        });        $("#btn-r").live("click", function(){            if(!isScrolling) {                isScrolling = true;                $("#columnsContainerTrack").animate({                    marginLeft: "-="+colWidth                }, 500, function() {                    ScrollableList.setScrollButtonStates();                    setTimeout(resetIsScrolling, 250);                } );            }        });        // left button        // -----------------------------------------------        $("#btn-l").live("mouseover", function(){            $(this).css({                "border-color" : "#369",                "background-position" : "-36px center"            });        });        $("#btn-l").live("mouseout", function(){            $(this).css({                "border-color" : "#666",                "background-position" : "-1px center"            });        });        $("#btn-l").live("click", function(){            if (!isScrolling) {                isScrolling = true;                $("#columnsContainerTrack").animate({                    marginLeft: "+="+colWidth                }, 500, function() {                    ScrollableList.setScrollButtonStates();                    setTimeout(resetIsScrolling, 250);                } );            }        });        // common        $("#btn-r, #btn-l").live("mousedown", function(){            $(this).css({                "border-color" : "#036"            });        });        $("#btn-r, #btn-l").live("mouseup", function(){            $(this).css({                "border-color" : "#369"            });        });    },    slideDownScrollButtons:function() {        if($("#btn-l").hasClass('visible')) {            $("#btn-l").slideDown();        }        if ($("#btn-r").hasClass('visible')) {            $("#btn-r").slideDown();        }    },    slideUpScrollButtons:function() {        if($("#btn-l").hasClass('visible')) {            $("#btn-l").slideUp();        }        if ($("#btn-r").hasClass('visible')) {            $("#btn-r").slideUp();        }    },    setScrollButtonStates: function() {        var columnWidth = $('#columnsContainerTrack').find('.columns:first').width();        var trackMarginLeft = $('#columnsContainerTrack').css('margin-left');        trackMarginLeft = trackMarginLeft == 'auto' ? 0 : parseInt(trackMarginLeft);        // left scroll        if (trackMarginLeft == 0) {            $("#btn-l").fadeOut(250);            $("#btn-l").removeClass('visible');        } else {            $("#btn-l").fadeIn(250);            $("#btn-l").addClass('visible');        }        // right scroll        if (((ScrollableList.numColumns * columnWidth) + trackMarginLeft) <= $('#columnsContainer').width()) {            $("#btn-r").fadeOut(250);            $("#btn-r").removeClass('visible');        } else {            $("#btn-r").fadeIn(250);            $("#btn-r").addClass('visible');        }    },    /*getNavigationEntry: function(list, id) {     var val = null;     if(list[id] != null) {     val = list[id];     } else {     for(var x in list) {     var res = null;     if(list[x] instanceof Array)     res = ScrollableList.getNavigationEntry(list[x], id);     if(res != null)     val = res;     }     }     return val;     },     */    getPath: function(list, id, path) {         if(path == null)             path = '';             if(list[id] != null) {                return path += '/'+id;             } else {                 for(var x in list) {                     var p = path+'/'+x;                     if(list[x] instanceof Array)                        var newPath = ScrollableList.getPath(list[x], id, p);                     if(newPath != undefined) {                         return newPath;                 }             }         }     }};/** * @author jmiller */var StopWatch = {    // properties    startTime: null,    // methods    start: function() {        startTime = (new Date).getTime();    },    stop: function() {        ErrorManager.show("elapsed: " + ((new Date).getTime() - startTime) + " ms");    }};function ColorPickerComponent(id, type, label, color, updateFunction, resetFunction) {    var out = $("<div class='colorPickerComponent'>"            + "<span class='colorpickerlabel " +  type + "'>" + label + "</span>"            + "<div id='" + id + "' class='colorPickerControl'>"            + "<div style='background-color: " + color + "'>"            + "</div>"            + "</div>"            + "<span class='colorPickerReset'>" + ResourceManager.getString("common_reset") + "</span>"            + "</div>");    out.find('.colorPickerReset').click(resetFunction);    out.find('#' + id).ColorPicker({        color: color,        onShow: function (colpkr) {            $(colpkr).fadeIn(500);            return false;        },        onHide: function (colpkr) {            $(colpkr).fadeOut(500);            return false;        },        onChange: function (hsb, hex, rgb) {            updateFunction(hex);            Theme.currentThemeName = "custom";            $('#changeTheme').val("custom");            MessageProcessor.broadcast(wrapMessage(createStyleMessage()));        }    });    return out;}var Preferences = {    show: function() {        var content = $("<div id='prefWindowContent'>"                + "<span class='prefLang'>" + ResourceManager.getString("preferences_language") + ":" + "</span> "                + "<select id='changeLocale'>"                + "<option value='en'>English</option>"                + "<option value='es'>Espa&ntilde;ol</option>"                + "<option value='fr'>Fran&ccedil;ais</option>"                + "<option value='ar'>Arabic</option>"                + "<option value='xx'>Default</option>"                + "</select>"                + "<br><br><span class='prefTheme'>" + ResourceManager.getString("preferences_theme") + ":" + "</span> <select id='changeTheme'></select>"                + "<br><br>"                + "<div class='colorPickerContainer'></div>"                + "</div>");        var container = content.find('.colorPickerContainer');        container.append(ColorPickerComponent("primaryColorSelector", "primary", ResourceManager.getString("preferences_color_primary"), Theme.custom.colors.primary, Theme.setPrimaryColor, Theme.resetPrimaryColor));        container.append(ColorPickerComponent("secondaryColorSelector", "secondary", ResourceManager.getString("preferences_color_secondary"), Theme.custom.colors.secondary, Theme.setSecondaryColor, Theme.resetSecondaryColor));        container.append(ColorPickerComponent("interactionColorSelector", "interaction", ResourceManager.getString("preferences_color_interaction"), Theme.custom.colors.interaction, Theme.setInteractionColor, Theme.resetInteractionColor));        container.append(ColorPickerComponent("selectionColorSelector", "selection", ResourceManager.getString("preferences_color_selection"), Theme.custom.colors.selection, Theme.setSelectionColor, Theme.resetSelectionColor));        container.append(ColorPickerComponent("primaryTextColorSelector", "text", ResourceManager.getString("preferences_text"), Theme.custom.text.primary.color, Theme.setTextPrimaryColor, Theme.resetTextPrimaryColor));        container.append(ColorPickerComponent("secondaryTextColorSelector", "text", ResourceManager.getString("preferences_text"), Theme.custom.text.secondary.color, Theme.setTextSecondaryColor, Theme.resetTextSecondaryColor));        EventDispatcher.addEventListener(Localization.events.localeChange,                function() {                    content.find('.prefLang').text(ResourceManager.getString("preferences_language") + ":");                    content.find('.prefTheme').text(ResourceManager.getString("preferences_theme") + ":");                    content.find('.colorpickerlabel.primary').text(ResourceManager.getString("preferences_color_primary"));                    content.find('.colorpickerlabel.secondary').text(ResourceManager.getString("preferences_color_secondary"));                    content.find('.colorpickerlabel.interaction').text(ResourceManager.getString("preferences_color_interaction"));                    content.find('.colorpickerlabel.selection').text(ResourceManager.getString("preferences_color_selection"));                    content.find('.colorPickerReset').text(ResourceManager.getString("common_reset"));                });        var val = CookieManager.get("theme");        if (!val) {            val = Theme.defaultTheme;        }        content.find('#changeTheme').append("<option value='custom'>custom</option>");        for (var x in Theme.themes) {            content.find('#changeTheme').append("<option value='" + x + "' " + (val == x ? "selected" : "") + ">" + x + "</option>");        }        if (CommonContext.locale) {            content.find('#changeLocale').val(CommonContext.locale);        }        content.find('#changeTheme').change(function() {            if ($(this).val() == "none") {                return;            }            Theme.setTheme($(this).val());        });        content.find('#changeLocale').change(function() {            ResourceManager.setLocale($(this).val());        });        $('#prefWindowCloseButton').click(function() {            Theme.save();            ModalWindowFactory.close();        });        var buttons = [Button("saveTabCreationButton", "common_save", Preferences.save)];        ModalWindowFactory.show("prefWindowModal", "preferences_label_title", "", content, "", buttons, ModalWindowFactory.close);    },    save: function() {        Theme.save();        CookieManager.set("locale", $('#changeLocale').val());        ModalWindowFactory.close();    }}function BreadCrumbValueObject(id, caption, description, itemId) {    /**     * The unique id for the object     */    this.id = id;    /**     * The name that is displayed in the breadcrumb     * @type string     */    this.caption = caption;    /**     * Description for the breadcrumb item, if any     * @type string     */    this.description = description;    /**     * The id of the HTML element in the browse menu to link to     */    this.itemId = itemId;}var BreadCrumb = {    //properties    idMarker: "crumb_",    leafId: "breadcrumb_leaf",    items: [],    UI: $("<div id='breadcrumb' class='breadcrumb'>"                + "<div>"                + "<div id='breadcrumbHeader'>"                + "</div>"                + "</div>"                + "</div>"),    currentIndex: -1,    /**     * Events associated with the ScrollableList.     */    events: {        click: "breadCrumbItemClick"    },    create: function () {        $('#areas > #browseButtonState').append(BreadCrumb.UI);    },    initialize: function (items) {        BreadCrumb.clear();        BreadCrumb.pushItems(items);        EventDispatcher.addEventListener(ScrollableList.events.click,            function(id) {                BreadCrumb.removeHighlight();                $.each(BreadCrumb.items, function() {                    if(this.itemId == id) {                        BreadCrumb.highlightItem(this)//                      return false;                    }                });            });    },    //methods    pushItems: function (items) {        $(items).each(function (index) {            BreadCrumb.pushItem(items[index]);        });    },    pushItem: function(item) {        BreadCrumb.drawItem (item);        BreadCrumb.items.push (item);        BreadCrumb.currentIndex = BreadCrumb.items.length-1;        BreadCrumb.highlightItem(BreadCrumb.items[BreadCrumb.currentIndex])        BreadCrumb.redraw ();    },    insertItem: function(zero_based_index, item) {        //insertItem cannot use to add items by leaving        // empty items in between.        if (zero_based_index > (BreadCrumb.items.length)) {            return;        }        //if inserting at a position in between, then all the        //subsequent items must be removed.        while (zero_based_index <= (BreadCrumb.items.length-1)) {            BreadCrumb.popItem ();        }        BreadCrumb.pushItem (item);//        code to push items in bulk to demo the rendering of item labels//        into folder-icons.//        BreadCrumb.bulkInitialize ();    },    addLeaf: function(item) {        if(!BreadCrumb.UI.find('#breadcrumbHeader > div').hasClass("leaf")) {            var cHeader = BreadCrumb.UI.find('#breadcrumbHeader');            cHeader.append("<div class='breadCrumbItemBody leaf'>"                + "<a id='" + item.id + "' class='breadcrumbButton breadcrumbleaf' href='javascript:void(0)'>"+item.caption+"</a>"                + "</div>");            cHeader.append("<div class='breadCrumbItemArrow'></div>");            BreadCrumb.highlightItem(item);        }    },    //element id's pre-fixed with * needs to be escaped when using    // as jquery id selectors.    escapeId: function (itemId) {        return itemId.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/])/g,'\\$1');    },    drawItem: function (item) {        var cHeader = BreadCrumb.UI.find('#breadcrumbHeader');        cHeader.append("<div class='breadCrumbItemBody'>"                + "<a id='" + item.id + "' class='breadcrumbButton' href='javascript:void(0)'></a>"                + "</div>");        cHeader.append("<div class='breadCrumbItemArrow'></div>");        var itemId = item.id;        var itemIdSelector = BreadCrumb.escapeId (itemId);//        if(itemId.itemId != null) {            BreadCrumb.UI.find('#'+itemIdSelector).click(function (){                $.grep(BreadCrumb.items, function (anItem, index) {                    if (anItem && (anItem.id == itemId))  {                        BreadCrumb.currentIndex = index;                        BreadCrumb.highlightItem (anItem);                        BreadCrumb.redraw ();                        var loc = item.itemId.replace(ScrollableList.marker, "").split("_");                        NavigationRC.pathList = loc;                        NavigationRC.doInitialLoad();                         if($('#browseMenu').is(':hidden'))                            BreadCrumb.openBrowseMenu();                        EventDispatcher        					.dispatchEvent(BreadCrumb.events.click, item.itemId);                        return true;                    } else {                        return false;                    }                });            });//        }    },    getUsedWidth: function () {        var usedWidth = 0;        $(BreadCrumb.items).each (function (index){            var itemIdSelector = BreadCrumb.escapeId (BreadCrumb.items[index].id);            var body = BreadCrumb.UI.find('#'+itemIdSelector).parent ();            usedWidth += $(body).outerWidth () + $(body).next('.breadCrumbItemArrow').outerWidth ();        });        return usedWidth;    },    redraw: function () {        //initializing with original labels for the items        $(BreadCrumb.items).each (function (index){            var itemIdSelector = BreadCrumb.escapeId (BreadCrumb.items[index].id);            BreadCrumb.UI.find('#'+itemIdSelector).text(BreadCrumb.items[index].caption);            BreadCrumb.UI.find('#'+itemIdSelector).parent().removeClass ('folderIcon');        });        //starting from the beginning, converting into folder icons, if the displayed width        // is more than the allowed width.        var breadCrumbWidth = BreadCrumb.UI.find('#breadcrumbHeader').width();        var cumBreadCrumbWidth = BreadCrumb.getUsedWidth ();        $(BreadCrumb.items).each (function (index){            if (cumBreadCrumbWidth >= breadCrumbWidth) {                //currently highlighted item always should display original label                if (index != BreadCrumb.currentIndex) {                    var itemIdSelector = BreadCrumb.escapeId (BreadCrumb.items[index].id);                    var link = BreadCrumb.UI.find('#'+itemIdSelector);                    var body = $(link).parent ();                    //Decrementing the width taken by the to-be-made-folder-icon item                    cumBreadCrumbWidth -= $(body).outerWidth () + $(body).next('.breadCrumbItemArrow').outerWidth ();                    $(link).text("");                    $(body).addClass ('folderIcon');                    //Incrementing the width taken by the folder-icon-made item                    cumBreadCrumbWidth += $(body).outerWidth () + $(body).next('.breadCrumbItemArrow').outerWidth ();                }            }        });    },    removeBreadCrumbItem: function () {        BreadCrumb.UI.find('.breadCrumbItemBody').last().remove();        BreadCrumb.UI.find('.breadCrumbItemArrow').last().remove();    },    popItem: function () {        BreadCrumb.removeBreadCrumbItem ();        BreadCrumb.items.pop ();        BreadCrumb.currentIndex = BreadCrumb.items.length-1;        BreadCrumb.highlightItem(BreadCrumb.items[BreadCrumb.currentIndex]);        BreadCrumb.redraw ();    },    clear: function () {        BreadCrumb.UI.find('.breadCrumbItem').remove();        BreadCrumb.items = []        BreadCrumb.currentIndex = -1;    },    browseToActiveItem: function () {    },    highlightItem: function (item) {        if(item == undefined)        return;        var itemId = item.id;//        $('.breadCrumbSelectedRight').removeClass('breadCrumbSelectedRight');//        $('.breadCrumbSelectedLeft').removeClass('breadCrumbSelectedLeft');//        $('.breadCrumbSelected').removeClass('breadCrumbSelected');        BreadCrumb.removeHighlight();        var s = BreadCrumb.UI.find('.breadcrumbButton').filter (function (index){            return $(this).attr("id") == itemId;        }).parent();        s.addClass('breadCrumbSelected');        $(s).next('.breadCrumbItemArrow').addClass('breadCrumbSelectedRight');        $(s).prev('.breadCrumbItemArrow').addClass('breadCrumbSelectedLeft');    },    removeHighlight: function() {        BreadCrumb.UI.find('.breadCrumbSelectedRight').removeClass('breadCrumbSelectedRight');        BreadCrumb.UI.find('.breadCrumbSelectedLeft').removeClass('breadCrumbSelectedLeft');        BreadCrumb.UI.find('.breadCrumbSelected').removeClass('breadCrumbSelected');    },    openBrowseMenu: function() {        var browseMenu = $('#browseMenu');        var browseButtonState = $('#browseButtonState');        var browseButton = browseButtonState.find('#browseButton');        if (browseMenu.is(':hidden')) {            browseButton.removeClass("browseButton");            browseButton.addClass("browseTab");            browseButton.find('#browseArrow').removeClass('browseButtonDownArrow');            browseButton.find('#browseArrow').addClass('upArrow');            browseButtonState.addClass('active over');            closeOpenMenus();            browseMenu.slideDown('normal', function() {                // add a handler to close the Browsemenu when the mouse is clicked outside                $('body').click(function() {                    closeOpenMenus();                });                // scroll the selectedItem into view                scrollSelectedItemIntoView();            });            $('#browseButtonState, #browseMenu').bind('mouseenter', function() {$(this).addClass("over");});            $('#browseButtonState, #browseMenu').bind('mouseleave', function() {$(this).removeClass("over");});        }    },    //code to push items in bulk to demo the rendering of item labels    // into folder-icons.    bulkInitialize: function () {        var items = [            new BreadCrumbValueObject("0", "label1", ""),            new BreadCrumbValueObject("1", "label2", ""),            new BreadCrumbValueObject("2", "label3", ""),            new BreadCrumbValueObject("3", "label4", ""),            new BreadCrumbValueObject("4", "label5", ""),            new BreadCrumbValueObject("5", "label6", ""),            new BreadCrumbValueObject("6", "label7", ""),            new BreadCrumbValueObject("7", "label8", ""),            new BreadCrumbValueObject("8", "label9", ""),            new BreadCrumbValueObject("9", "label10", ""),            new BreadCrumbValueObject("10", "label11", ""),            new BreadCrumbValueObject("11", "label12", ""),            new BreadCrumbValueObject("12", "label13", ""),            new BreadCrumbValueObject("13", "label14", ""),            new BreadCrumbValueObject("14", "label15", ""),            new BreadCrumbValueObject("15", "label16", ""),            new BreadCrumbValueObject("16", "label17", ""),            new BreadCrumbValueObject("17", "label18", ""),            new BreadCrumbValueObject("18", "label19", ""),            new BreadCrumbValueObject("19", "label20", ""),            new BreadCrumbValueObject("20", "label21", ""),            new BreadCrumbValueObject("21", "label22", ""),            new BreadCrumbValueObject("22", "label23", ""),            new BreadCrumbValueObject("23", "label24", ""),            new BreadCrumbValueObject("24", "label25", ""),            new BreadCrumbValueObject("25", "label26", ""),            new BreadCrumbValueObject("26", "label27", "")        ];        BreadCrumb.initialize (items);    }};